/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: can-d.proto */

#ifndef PROTOBUF_C_can_2dd_2eproto__INCLUDED
#define PROTOBUF_C_can_2dd_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
#error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003001 < PROTOBUF_C_MIN_COMPILER_VERSION
#error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

typedef struct _FromEmbedded FromEmbedded;
typedef struct _ToEmbedded ToEmbedded;
typedef struct _ControlCommand ControlCommand;
typedef struct _LogFSInfo LogFSInfo;
typedef struct _LogFileInfo LogFileInfo;
typedef struct _DataPayload DataPayload;

/* --- enums --- */

typedef enum _ControlCommandType {
    CONTROL_COMMAND_TYPE__STOP_LOG = 0,
    CONTROL_COMMAND_TYPE__START_LOG = 1,
    CONTROL_COMMAND_TYPE__MARK_LOG = 2,
    CONTROL_COMMAND_TYPE__GET_LOGFS_INFO = 3,
    CONTROL_COMMAND_TYPE__GET_LOG = 4,
    CONTROL_COMMAND_TYPE__DELETE_LOG = 5 PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CONTROL_COMMAND_TYPE)
} ControlCommandType;

/* --- messages --- */

typedef enum {
    FROM_EMBEDDED__CONTENTS__NOT_SET = 0,
    FROM_EMBEDDED__CONTENTS_CAN_DATA_CHUNK = 1,
    FROM_EMBEDDED__CONTENTS_GPS_DATA_CHUNK = 2,
    FROM_EMBEDDED__CONTENTS_LOG_FSINFO = 3 PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(FROM_EMBEDDED__CONTENTS)
} FromEmbedded__ContentsCase;

struct _FromEmbedded {
    ProtobufCMessage base;
    FromEmbedded__ContentsCase contents_case;
    union {
        DataPayload* candatachunk;
        DataPayload* gpsdatachunk;
        LogFSInfo* logfsinfo;
    };
};
#define FROM_EMBEDDED__INIT                                 \
    {                                                       \
        PROTOBUF_C_MESSAGE_INIT(&from_embedded__descriptor) \
        , FROM_EMBEDDED__CONTENTS__NOT_SET, { 0 }           \
    }

typedef enum {
    TO_EMBEDDED__CONTENTS__NOT_SET = 0,
    TO_EMBEDDED__CONTENTS_COMMAND = 1 PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TO_EMBEDDED__CONTENTS)
} ToEmbedded__ContentsCase;

struct _ToEmbedded {
    ProtobufCMessage base;
    ToEmbedded__ContentsCase contents_case;
    union {
        ControlCommand* command;
    };
};
#define TO_EMBEDDED__INIT                                 \
    {                                                     \
        PROTOBUF_C_MESSAGE_INIT(&to_embedded__descriptor) \
        , TO_EMBEDDED__CONTENTS__NOT_SET, { 0 }           \
    }

typedef enum {
    CONTROL_COMMAND__INFO__NOT_SET = 0,
    CONTROL_COMMAND__INFO_LOG_NAME = 2 PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CONTROL_COMMAND__INFO)
} ControlCommand__InfoCase;

struct _ControlCommand {
    ProtobufCMessage base;
    ControlCommandType commandtype;
    ControlCommand__InfoCase info_case;
    union {
        char* logname;
    };
};
#define CONTROL_COMMAND__INIT                                                   \
    {                                                                           \
        PROTOBUF_C_MESSAGE_INIT(&control_command__descriptor)                   \
        , CONTROL_COMMAND_TYPE__STOP_LOG, CONTROL_COMMAND__INFO__NOT_SET, { 0 } \
    }

struct _LogFSInfo {
    ProtobufCMessage base;
    size_t n_logfiles;
    LogFileInfo** logfiles;
};
#define LOG_FSINFO__INIT                                 \
    {                                                    \
        PROTOBUF_C_MESSAGE_INIT(&log_fsinfo__descriptor) \
        , 0, NULL                                        \
    }

struct _LogFileInfo {
    ProtobufCMessage base;
    uint32_t size;
    uint64_t unixtime;
    char* filename;
};
#define LOG_FILE_INFO__INIT                                 \
    {                                                       \
        PROTOBUF_C_MESSAGE_INIT(&log_file_info__descriptor) \
        , 0, 0, (char*)protobuf_c_empty_string              \
    }

struct _DataPayload {
    ProtobufCMessage base;
    uint32_t datalength;
    ProtobufCBinaryData data;
};
#define DATA_PAYLOAD__INIT                                 \
    {                                                      \
        PROTOBUF_C_MESSAGE_INIT(&data_payload__descriptor) \
        , 0, { 0, NULL }                                   \
    }

/* FromEmbedded methods */
void from_embedded__init(FromEmbedded* message);
size_t from_embedded__get_packed_size(const FromEmbedded* message);
size_t from_embedded__pack(const FromEmbedded* message,
    uint8_t* out);
size_t from_embedded__pack_to_buffer(const FromEmbedded* message,
    ProtobufCBuffer* buffer);
FromEmbedded*
from_embedded__unpack(ProtobufCAllocator* allocator,
    size_t len,
    const uint8_t* data);
void from_embedded__free_unpacked(FromEmbedded* message,
    ProtobufCAllocator* allocator);
/* ToEmbedded methods */
void to_embedded__init(ToEmbedded* message);
size_t to_embedded__get_packed_size(const ToEmbedded* message);
size_t to_embedded__pack(const ToEmbedded* message,
    uint8_t* out);
size_t to_embedded__pack_to_buffer(const ToEmbedded* message,
    ProtobufCBuffer* buffer);
ToEmbedded*
to_embedded__unpack(ProtobufCAllocator* allocator,
    size_t len,
    const uint8_t* data);
void to_embedded__free_unpacked(ToEmbedded* message,
    ProtobufCAllocator* allocator);
/* ControlCommand methods */
void control_command__init(ControlCommand* message);
size_t control_command__get_packed_size(const ControlCommand* message);
size_t control_command__pack(const ControlCommand* message,
    uint8_t* out);
size_t control_command__pack_to_buffer(const ControlCommand* message,
    ProtobufCBuffer* buffer);
ControlCommand*
control_command__unpack(ProtobufCAllocator* allocator,
    size_t len,
    const uint8_t* data);
void control_command__free_unpacked(ControlCommand* message,
    ProtobufCAllocator* allocator);
/* LogFSInfo methods */
void log_fsinfo__init(LogFSInfo* message);
size_t log_fsinfo__get_packed_size(const LogFSInfo* message);
size_t log_fsinfo__pack(const LogFSInfo* message,
    uint8_t* out);
size_t log_fsinfo__pack_to_buffer(const LogFSInfo* message,
    ProtobufCBuffer* buffer);
LogFSInfo*
log_fsinfo__unpack(ProtobufCAllocator* allocator,
    size_t len,
    const uint8_t* data);
void log_fsinfo__free_unpacked(LogFSInfo* message,
    ProtobufCAllocator* allocator);
/* LogFileInfo methods */
void log_file_info__init(LogFileInfo* message);
size_t log_file_info__get_packed_size(const LogFileInfo* message);
size_t log_file_info__pack(const LogFileInfo* message,
    uint8_t* out);
size_t log_file_info__pack_to_buffer(const LogFileInfo* message,
    ProtobufCBuffer* buffer);
LogFileInfo*
log_file_info__unpack(ProtobufCAllocator* allocator,
    size_t len,
    const uint8_t* data);
void log_file_info__free_unpacked(LogFileInfo* message,
    ProtobufCAllocator* allocator);
/* DataPayload methods */
void data_payload__init(DataPayload* message);
size_t data_payload__get_packed_size(const DataPayload* message);
size_t data_payload__pack(const DataPayload* message,
    uint8_t* out);
size_t data_payload__pack_to_buffer(const DataPayload* message,
    ProtobufCBuffer* buffer);
DataPayload*
data_payload__unpack(ProtobufCAllocator* allocator,
    size_t len,
    const uint8_t* data);
void data_payload__free_unpacked(DataPayload* message,
    ProtobufCAllocator* allocator);
/* --- per-message closures --- */

typedef void (*FromEmbedded_Closure)(const FromEmbedded* message,
    void* closure_data);
typedef void (*ToEmbedded_Closure)(const ToEmbedded* message,
    void* closure_data);
typedef void (*ControlCommand_Closure)(const ControlCommand* message,
    void* closure_data);
typedef void (*LogFSInfo_Closure)(const LogFSInfo* message,
    void* closure_data);
typedef void (*LogFileInfo_Closure)(const LogFileInfo* message,
    void* closure_data);
typedef void (*DataPayload_Closure)(const DataPayload* message,
    void* closure_data);

/* --- services --- */

/* --- descriptors --- */

extern const ProtobufCEnumDescriptor control_command_type__descriptor;
extern const ProtobufCMessageDescriptor from_embedded__descriptor;
extern const ProtobufCMessageDescriptor to_embedded__descriptor;
extern const ProtobufCMessageDescriptor control_command__descriptor;
extern const ProtobufCMessageDescriptor log_fsinfo__descriptor;
extern const ProtobufCMessageDescriptor log_file_info__descriptor;
extern const ProtobufCMessageDescriptor data_payload__descriptor;

PROTOBUF_C__END_DECLS

#endif /* PROTOBUF_C_can_2dd_2eproto__INCLUDED */
